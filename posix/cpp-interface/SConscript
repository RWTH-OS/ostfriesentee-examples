# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
#
# This file is part of Ostfriesentee.
#
# Ostfriesentee is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ostfriesentee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Ostfriesentee.  If not, see <http://www.gnu.org/licenses/>.

import os

Import('env')

#app_name = 'helloworld'
#app_name = 'benchmark'
#app_name = 'testsuite'
app_name = 'object'
app_path = '../../app'

# dependencies
vm = SConscript(['../../ostfriesentee/vm/SConscript'], exports = 'env')
app = SConscript(['{}/{}/SConscript'.format(app_path, app_name)], exports = 'env')

app_di  = os.path.join(env['OFT_BUILDPATH'], 'app', app_name, app_name + '.di')
app_inc = os.path.join(env['OFT_BUILDPATH'], 'app', app_name)
base_lib_di  = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base', 'base.di')
base_lib_inc = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base')
base_lib_a   = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base', 'libbase.a')
util_lib_di  = os.path.join(env['OFT_BUILDPATH'], 'lib', 'util', 'util.di')
oft_lib_di  = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee', 'ostfriesentee.di')
oft_lib_inc = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee')
oft_lib_a   = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee', 'libostfriesentee.a')

# build c
c_env = env.Clone()
c_env.VariantDir(variant_dir='build/posix', src_dir='src')
c_env.Append(CPPPATH = base_lib_inc)
c_env.Append(CPPPATH = oft_lib_inc)
c_env.Append(CPPPATH = app_inc)
c_env.Append(CPPPATH = [os.path.abspath('../ostfriesentee/vm/c')])

# put all di files into single object file
# TODO: HACK: all libs/apps hardcoded
infusions = [base_lib_di, oft_lib_di, util_lib_di, app_di]
archive = env.Command("build/posix/generated/di_archive.ar", infusions, "ar rcf $TARGET $SOURCES")
di_c_array = env.CArray("build/posix/generated/di_archive.c", archive)

c_env.AppendUnique(LIBS = vm + [c_env.File(base_lib_a), c_env.File(oft_lib_a)])

posix = c_env.Program('build/posix/main', env.Glob('build/posix/*.c') + env.Glob('build/posix/*.cpp') + [di_c_array])


Return('posix')
