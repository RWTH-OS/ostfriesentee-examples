import os


# build ostfriesentee
env = Environment(toolpath = [os.path.join('..', '..', 'ostfriesentee', 'scons')], tools = ['default', 'ostfriesentee'])
env.Architecture("cortex-m4f")

# debug build
env['CFLAGS'].append("-O0")
env['CFLAGS'].append("-g")

# pack structs
env['CFLAGS'].append("-DPACK_STRUCTS")

app_name = 'helloworld'

# dependencies
vm = SConscript(['../../ostfriesentee/vm/SConscript'], exports = 'env')
app = SConscript(['../../app/{}/SConscript'.format(app_name)], exports = 'env')

app_di = os.path.join(env['OFT_BUILDPATH'], 'app', app_name, app_name + '.di')
base_lib_di  = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base', 'base.di')
base_lib_inc = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base')
base_lib_a   = os.path.join(env['OFT_BUILDPATH'], 'lib', 'base', 'libbase.a')
oft_lib_di  = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee', 'ostfriesentee.di')
oft_lib_inc = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee')
oft_lib_a   = os.path.join(env['OFT_BUILDPATH'], 'lib', 'ostfriesentee', 'libostfriesentee.a')

# put all di files into single object file
# TODO: HACK: all libs/apps hardcoded
infusions = [base_lib_di, oft_lib_di, app_di]
archive = env.Command("build/posix/generated/di_archive.ar", infusions, "ar rcf $TARGET $SOURCES")
di_c_array = env.CArray("build/posix/generated/di_archive.c", archive)

env_oft = env.Clone()

# path to the xpcc root directory
rootpath = '../../ext/xpcc'

env = Environment(tools = ['xpcc'], toolpath = [rootpath + '/scons/site_tools'])

# find all source files
files = env.FindFiles('src')

# add ostfriesentee files
files.sources += di_c_array
env.Append(CPPPATH = env_oft['CPPPATH'])
env.Append(CPPPATH = [base_lib_inc])
env.Append(CPPPATH = [oft_lib_inc])
env.AppendUnique(LIBS = vm + [env.File(base_lib_a), env.File(oft_lib_a)])

# debug build
env['CXXFLAGS'].append("-O0")
env['CXXFLAGS'].append("-g")

# build the program
program = env.Program(target = env['XPCC_CONFIG']['general']['name'], source = files.sources)

# build the xpcc library
env.XpccLibrary()

# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())

hexfile = env.Hex(program)

env.Alias('program', env.OpenOcd(program))
env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('all')
